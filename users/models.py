from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.db import models
from django.conf import settings
from datetime import timedelta
import random, string
from django.contrib.auth.models import User
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

import uuid
# User Manager
class CustomUserManager(BaseUserManager):
    def create_user(self, email, name, password=None, **extra_fields):
        if not email:
            raise ValueError("ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ")
        email = self.normalize_email(email)
        user = self.model(email=email, name=name, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, name, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, name, password, **extra_fields)

# Custom User
class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    USER_TYPE_CHOICES = (
        ('student', 'ุทุงูุจ'),
        ('teacher', 'ูุนูู'),
        ('admin', 'ูุดุฑู'),
    )
    user_type = models.CharField(max_length=10, choices=USER_TYPE_CHOICES, default='student')
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    objects = CustomUserManager()
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name']

    def __str__(self):
        return self.email
    class Meta:
        verbose_name = _("ุงููุณุชุฎุฏููู ุนูู ุงููููุน ")
        verbose_name_plural = _("ุงููุณุชุฎุฏููู ุนูู ุงููููุน ")
# Teacher
class Teacher(models.Model):
    name = models.CharField(max_length=100)
    image = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.name
    


def get_default_teacher():
    """ุชุฑุฌุน id ููุนูู ุงุณูู 'ูุนูู ุบูุฑ ูุญุฏุฏ' ูู ููุฌูุฏ"""
    teacher = Teacher.objects.filter(name="ูุนูู ุบูุฑ ูุญุฏุฏ").first()
    return teacher.id if teacher else None



class StudentProfile(models.Model):
    # ุฎูุงุฑุงุช ุงูุชูููู
    LEVEL_CHOICES = [
        ("ุถุนูู", "ุถุนูู"),
        ("ุฌูุฏ", "ุฌูุฏ"),
        ("ุฌูุฏ ุฌุฏุง", "ุฌูุฏ ุฌุฏุง"),
        ("ููุชุงุฒ", "ููุชุงุฒ"),
        ("ููุชุงุฒ ุฌุฏุง", "ููุชุงุฒ ุฌุฏุง"),
    ]
    LEVEL_CHOICES = [
        ("ูุจุชุฏุฆ", "ูุจุชุฏุฆ"),
        ("ูุชูุณุท", "ูุชูุณุท"),
        ("ูุชูุฏู", "ูุชูุฏู"),
    ]
    # ุจูุงูุงุช ุฃุณุงุณูุฉ
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    age = models.PositiveIntegerField(default=0)
    city = models.CharField(max_length=100, blank=True)
    image = models.ImageField(upload_to='student_images/', blank=True, null=True)
    current_surah = models.CharField(max_length=100, default='-')
    current_juz = models.CharField(max_length=100, default='-')
    progress = models.PositiveSmallIntegerField(default=0)
    payment_receipt = models.ImageField(upload_to='student_receipts/', null=True, blank=True)
    reviews = models.IntegerField(default=0, verbose_name="ุงููุฑุงุฌุนุงุช ุงููุงุฌุญุฉ")
    rating = models.IntegerField(default=0, verbose_name="ุงูุชูููู")  # ูุซูุงู ูู 5
    commitment = models.FloatField(default=0, verbose_name="ูุนุฏู ุงูุงูุชุฒุงู")  # %
    weekly_level = models.CharField(max_length=20, choices=LEVEL_CHOICES, blank=True, null=True, verbose_name="ุงูุชูููู ุงูุฃุณุจูุนู")
    monthly_level = models.CharField(max_length=20, choices=LEVEL_CHOICES, blank=True, null=True, verbose_name="ุงูุชูููู ุงูุดูุฑู")
    yearly_level = models.CharField(max_length=20, choices=LEVEL_CHOICES, blank=True, null=True, verbose_name="ุงูุชูููู ุงูุณููู")
    level = models.CharField(max_length=20, choices=LEVEL_CHOICES, default="ูุจุชุฏุฆ")  # ๐ ุฑุฌูุนู ููุง
    def is_complete(self):
        return bool(self.user and self.current_surah and self.current_juz and self.age and self.city and self.image)
    def __str__(self):
        return self.user.name
    class Meta:
        verbose_name = _("ูุนูููุงุช  ุงูุทุงูุจ")
        verbose_name_plural = _("ูุนูููุงุช  ุงูุทูุงุจ")
class Meta:
    unique_together = ('student', 'day')
class WeeklyProgress(models.Model):
    
    DAYS_OF_WEEK = [
    ('ุงูุณุจุช', 'ุงูุณุจุช'),
    ('ุงูุฃุญุฏ', 'ุงูุฃุญุฏ'),
    ('ุงูุฅุซููู', 'ุงูุฅุซููู'),
    ('ุงูุซูุงุซุงุก', 'ุงูุซูุงุซุงุก'),
    ('ุงูุฃุฑุจุนุงุก', 'ุงูุฃุฑุจุนุงุก'),
    ('ุงูุฎููุณ', 'ุงูุฎููุณ'),
    ('ุงูุฌูุนุฉ', 'ุงูุฌูุนุฉ'),
]
    student = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    day = models.CharField(max_length=10, choices=DAYS_OF_WEEK)
    
    
    memorization_rating = models.CharField(
        max_length=20,
        choices=[
            ('ุถุนูู', 'ุถุนูู'),
            ('ุฌูุฏ', 'ุฌูุฏ'),
            ('ุฌูุฏ ุฌุฏูุง', 'ุฌูุฏ ุฌุฏูุง'),
            ('ููุชุงุฒ', 'ููุชุงุฒ'),
            ('ููุชุงุฒ ุฌุฏูุง', 'ููุชุงุฒ ุฌุฏูุง')
        ],
        blank=True,
        null=True
    )
    review_rating = models.CharField(
        max_length=20,
        choices=[
            ('ุถุนูู', 'ุถุนูู'),
            ('ุฌูุฏ', 'ุฌูุฏ'),
            ('ุฌูุฏ ุฌุฏูุง', 'ุฌูุฏ ุฌุฏูุง'),
            ('ููุชุงุฒ', 'ููุชุงุฒ'),
            ('ููุชุงุฒ ุฌุฏูุง', 'ููุชุงุฒ ุฌุฏูุง')
        ],
        blank=True,
        null=True
    )
    class Meta:
        verbose_name = _("ุงูุชูููู ุงูุฃุณุจูุนู")
        verbose_name_plural = _("ุงูุชูููุงุช ุงูุฃุณุจูุนูุฉ")
class Appointment(models.Model):
    PHASE_CHOICES = [
        ("beginner", "ูุจุชุฏุฆ"),
        ("intermediate", "ูุชูุณุท"),
        ("advanced", "ูุชูุฏู"),
        ("expert", "ูุชุฎุตุต"),
        ("general", "ุงูููุฑุฃุฉ ุงูุนุงูุฉ"),
    ]
    PERIOD_CHOICES = [
        ("am", "ุตุจุงุญูุง"),
        ("pm", "ูุณุงุกู"),
    ]
    DAYS_CHOICES = [
        ("saturday", "ุงูุณุจุช"),
        ("sunday", "ุงูุฃุญุฏ"),
        ("monday", "ุงูุงุซููู"),
        ("tuesday", "ุงูุซูุงุซุงุก"),
        ("wednesday", "ุงูุฃุฑุจุนุงุก"),
        ("thursday", "ุงูุฎููุณ"),
        ("friday", "ุงูุฌูุนุฉ"),
    ]
    plan = models.ForeignKey('users.Plan', on_delete=models.CASCADE, verbose_name="ุงูุฎุทุฉ", null=True, blank=True)
    phase = models.CharField(max_length=20, choices=PHASE_CHOICES, verbose_name="ุงููุฑุญูุฉ", default="beginner")
    period = models.CharField(max_length=20, choices=PERIOD_CHOICES, default="am", verbose_name="ุงููุชุฑุฉ")
    day_of_week = models.CharField(max_length=20, verbose_name="ุงูููู", default="ุบูุฑ ูุญุฏุฏ")
    date = models.DateField(null=True, blank=True, verbose_name="ุงูุชุงุฑูุฎ (ุงุฎุชูุงุฑู)")
    start_time = models.TimeField(verbose_name="ููุช ุงูุจุฏุงูุฉ", default="00:00")
    trainer = models.CharField(max_length=100, verbose_name="ุงููุฏุฑุจ", default="ุบูุฑ ูุญุฏุฏ")
    day = models.CharField(max_length=20, choices=DAYS_CHOICES, null=True, blank=True)
      # ุงูุญููู ุงูุฎุงุตุฉ ุจุงูุญุฌุฒ
    is_public = models.BooleanField(default=False,verbose_name="ููุนุฏ ุนุงู ")  # ูุฑุฏู ุฃู ุฌูุงุนู
    is_booked = models.BooleanField(default=False,verbose_name="ููุนุฏ ุฎุงุต")  # ูุณุชุฎุฏู ุจุณ ูููุฑุฏู
    booked_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True,verbose_name="ุงูุดุฎุต ุงูุญุงุฌุฒ")
    participants = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name="group_appointments", blank=True)

    def is_available(self):
        if self.is_public:
            return True  # ุงูุฌูุงุนู ุฏุงูููุง ูุชุงุญ (ุฅูุง ูู ุนุงูู limit)
        return not self.is_booked  # ุงููุฑุฏู ูุชุงุญ ุจุณ ูู ูุด ูุญุฌูุฒ
    def __str__(self):
        return f"{self.get_phase_display()} - {self.get_day_display()} {self.start_time} ({self.get_period_display()}) - {self.trainer}"

    def clean(self):
        if self.start_time.hour >= 12 and self.period == "am":
            raise ValidationError("ุงูููุช ูุดูุฑ ุฅูู ูุชุฑุฉ ูุณุงุฆูุฉุ ููู ุงุฎุชุฑุช ุตุจุงุญุงู.")
        if self.start_time.hour < 12 and self.period == "pm":
            raise ValidationError("ุงูููุช ูุดูุฑ ุฅูู ูุชุฑุฉ ุตุจุงุญูุฉุ ููู ุงุฎุชุฑุช ูุณุงุกู.")

    class Meta:
        verbose_name = _("ุงูููุงุนูุฏ")
        verbose_name_plural = _("ุงูููุงุนูุฏ")
# Badge
class Badge(models.Model):
    student = models.ForeignKey(StudentProfile, on_delete=models.CASCADE)
    icon = models.CharField(max_length=50)
    label = models.CharField(max_length=50)
    bg = models.CharField(max_length=20, default='bg-gray-100')
    text_color = models.CharField(max_length=20, default='text-gray-400')
    label_color = models.CharField(max_length=20, default='text-gray-400')
    def __str__(self):
        return self.label

# Lesson
class Lesson(models.Model):
    title = models.CharField(max_length=255, null=True, blank=True)
    date = models.DateField()
    time = models.TimeField()
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True, default=get_default_teacher)
    student = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)
    meeting_link = models.URLField(blank=True, null=True)
    record_link = models.URLField(blank=True, null=True)
    content = models.TextField(blank=True, null=True)
    # ุฃู ุญููู ุฅุถุงููุฉ

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _("ุฏุฑุณ")              # ๐ ุงุณู ููุฑุฏ
        verbose_name_plural = _("ุงูุฏุฑูุณ")    # ๐ ุงุณู ุฌูุน
# Evaluation
class Evaluation(models.Model):
    student = models.ForeignKey(StudentProfile, on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True)
    date = models.DateField()
    stars = models.PositiveSmallIntegerField(default=0)
    comment = models.TextField(blank=True)

    def last_evaluation(self):
        return self.evaluation_set.order_by('-date').first()

    def last_stars(self):
        last_eval = self.last_evaluation()
        return last_eval.stars if last_eval else 0

    def __str__(self):
        return f"{self.student.user.name} - {self.stars} ูุฌูู"
    class Meta:
            verbose_name = _("ุงูุชูููู ุงูุนุงู ")
            verbose_name_plural = _("ุงูุชูููุงุช ุงูุนุงูู ")
# Message
class Message(models.Model):
    student = models.ForeignKey(StudentProfile, on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True)
    time = models.CharField(max_length=50)
    text = models.TextField()
    def __str__(self):
        return f"{self.teacher} > {self.student}"
    class Meta:
        verbose_name = _("ุงูุฑุณุงูู ")
        verbose_name_plural = _("ุงูุฑุณุงุฆู")
# Plan
class Plan(models.Model):
    plan_code = models.PositiveIntegerField(unique=True, null=True, blank=True, verbose_name="Plan Code")
    exam = models.ForeignKey("Exam", on_delete=models.SET_NULL, null=True, blank=True, related_name="plans")

    name = models.CharField(max_length=100)
    description = models.TextField(null=True, blank=True)
    duration_days = models.IntegerField(default=30)
    duration_text = models.CharField(max_length=50, default="ุดูุฑ")
    price = models.DecimalField(max_digits=8, decimal_places=2)
    teacher = models.CharField(max_length=100, null=True, blank=True)

    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name = _("ุฎุทุท ุงูุงุดุชุฑุงู ")
        verbose_name_plural = _("ุฎุทุท ุงูุงุดุชุฑุงู ")
from django.db import models
from django.conf import settings
from django.utils import timezone
from datetime import timedelta

class Subscription(models.Model):
    PHASE_CHOICES = [
        ('beginner', 'ูุจุชุฏุฆ'),
        ('intermediate', 'ูุชูุณุท'),
        ('advanced', 'ูุชูุฏู'),
        ('expert', 'ูุชุฎุตุต'),
        ('general', 'ุงูููุฑุฃุฉ ุงูุนุงูุฉ'),
    ]
    appointment = models.ForeignKey('Appointment', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="ุงูููุนุฏ")
    appointment_name = models.CharField(max_length=100, verbose_name="ุงุณู ุงูููุนุฏ", null=True, blank=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, blank=True, null=True)
    plan = models.ForeignKey('Plan', on_delete=models.CASCADE, null=True, blank=True)
    phase = models.CharField(max_length=100, choices=PHASE_CHOICES, null=True, blank=True)
    teacher = models.CharField(max_length=100, blank=True, null=True)
    description = models.TextField(null=True, blank=True)
    payment_image = models.ImageField(upload_to='payments/', null=True, blank=True)
    price = models.DecimalField(max_digits=8, decimal_places=2, blank=True, null=True)
    duration_days = models.IntegerField(blank=True, null=True)
    duration_text = models.CharField(max_length=255, blank=True, null=True)
    status = models.CharField(
        max_length=20,
        choices=[("pending", "ููุฏ ุงููุฑุงุฌุนุฉ"), ("approved", "ููุจูู"), ("rejected", "ูุฑููุถ")],
        default="pending",
    )
    start_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    end_date = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True)

    @property
    def is_active(self):
        now = timezone.now()
        return self.status == "approved" and self.end_date and self.end_date > now

    @property
    def display_status(self):
        now = timezone.now()
        if self.status == "rejected":
            return "ูุฑููุถ"
        elif self.status == "pending":
            return "ููุฏ ุงููุฑุงุฌุนุฉ"
        elif self.status == "approved":
            if self.end_date and self.end_date > now:
                return "ูุดุท"
            else:
                return "ููุชูู"
        return "ุบูุฑ ูุนุฑูู"

    def __str__(self):
        user_label = getattr(self.user, "email", None) or getattr(self.user, "username", None) or str(self.user)
        plan_label = getattr(self.plan, "name", None) or str(self.plan)
        status_label = self.get_status_display() if hasattr(self, "get_status_display") else self.status
        return f"{user_label} โ {plan_label} โ {status_label}"

    def save(self, *args, **kwargs):
    # ูู ูููุด end_date ู ููู ูุฏุฉ ููุฎุทุฉ โ ูุญุณุจูุง
        if not self.end_date and self.plan and self.plan.duration_days:
            self.end_date = timezone.now() + timedelta(days=self.plan.duration_days)

        # ูุงุฒู ูุณุชุฏุนู save ุงูุฃุตูู ุงูุฃูู ุนุดุงู ูุจูู ุนูุฏูุง ID ุตุงูุญ
        super().save(*args, **kwargs)

        # ุจุนุฏ ูุง ูุชุญูุธ ุงูุงุดุชุฑุงู ูุนุฏู ุงูููุงุนูุฏ ุงููุฑุชุจุทุฉ
        appointments = Appointment.objects.filter(plan=self.plan)

        if self.status == "approved":
            for app in appointments:
                app.participants.add(self.user)
        elif self.status in ["rejected", "expired", "canceled"]:
            for app in appointments:
                app.participants.remove(self.user)
    class Meta:
        verbose_name = _("ุทูุจุงุช ุงูุงุดุชุฑุงู")
        verbose_name_plural = _("ุทูุจุงุช ุงูุงุดุชุฑุงู")

# Payment
class Payment(models.Model):
    student = models.ForeignKey(StudentProfile, on_delete=models.CASCADE)
    date = models.DateTimeField(auto_now_add=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=[('pending', 'ููุฏ ุงููุฑุงุฌุนุฉ'), ('confirmed', 'ุชู ุงูุชุฃููุฏ')], default='pending')
    invoice = models.ImageField(upload_to='payment_invoices/')
    appointment = models.ForeignKey(Appointment, on_delete=models.CASCADE, null=True, blank=True)
    def __str__(self):
        return f"ุฏูุน {self.student} - {self.status}"
    class Meta:
        verbose_name = _("ููุงุชูุฑ ุงูุฏูุน")
        verbose_name_plural = _("ููุงุชูุฑ ุงูุฏูุน")

def generate_room_name():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=12))
class ReviewPlan(models.Model):
    student = models.ForeignKey(
        "StudentProfile",
        on_delete=models.CASCADE,
        related_name="review_plans",
        null=True,
        blank=True
    )
    title = models.CharField(max_length=200)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    day = models.DateField(default=timezone.now)
    surah = models.CharField(max_length=100, blank=True, null=True)
    ayat_count = models.PositiveIntegerField(default=0)
    is_completed = models.BooleanField(default=False)
    reminder_enabled = models.BooleanField(default=False)  # โ ุงุฎุชูุงุฑ ุงููุณุชุฎุฏู

    # ๐น ุงูุฅุฏุฎุงู ุงููุฏูู
    successful_reviews_manual = models.PositiveIntegerField(null=True, blank=True)

    @property
    def successful_reviews_auto(self):
        """ุงูุญุณุจุฉ ุงูุฃูุชููุงุชูู"""
        return ReviewPlan.objects.filter(student=self.student, is_completed=True).count()

    @property
    def successful_reviews(self):
        """ูุณุชุฎุฏู ุงููุฏูู ูู ูุชุณุฌูุ ูุฅูุง ูุฑุฌุน ุงูุฃูุชููุงุชูู"""
        if self.successful_reviews_manual is not None:
            return self.successful_reviews_manual
        return self.successful_reviews_auto   # โ ููุง ูุงู ููู return ุฒุงูุฏุฉ

    def __str__(self):
        return f"{self.student.user.name} - {self.title}"

    class Meta:
        verbose_name = _("ุฎุทุท ุงููุฑุงุฌุนู ููุทุงูุจ ")
        verbose_name_plural = _("ุฎุทุท ุงููุฑุงุฌุนู ููุทูุงุจ ")
class ReviewTask(models.Model):
    plan = models.ForeignKey("ReviewPlan", related_name="tasks", on_delete=models.CASCADE)
    description = models.CharField(max_length=255)
    is_done = models.BooleanField(default=False)
class Notification(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="notifications"
    )
    title = models.CharField(max_length=255)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user} - {self.title}"
    class Meta:
        verbose_name = _("ุงูุงุดุนุงุฑุงุช ")
        verbose_name_plural = _("ุงูุงุดุนุงุฑุงุช")
# models.py
class Meeting(models.Model):
    lesson = models.OneToOneField('Lesson', on_delete=models.CASCADE, related_name='meeting')
    room_name = models.CharField(max_length=128, unique=True)
    starts_at = models.DateTimeField()
    ends_at = models.DateTimeField(null=True, blank=True)
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.PROTECT)

    def __str__(self):
        return f"{self.lesson} โ {self.room_name}"
    class Meta:
        verbose_name = _("ูููู ุงูุงุฌุชูุงุน  ")
        verbose_name_plural = _("ุงูุงุฌุชูุงุนุงุช")
class GoogleFormResult(models.Model):
    exam = models.ForeignKey(
        "Exam", on_delete=models.CASCADE, related_name="results", null=True, blank=True
    )
    email = models.EmailField("ุงูุจุฑูุฏ ุงูุฅููุชุฑููู")
    score = models.CharField("ุงููุชูุฌุฉ", max_length=50)
    percentage = models.FloatField("ุงููุณุจุฉ ุงููุฆููุฉ", null=True, blank=True)  # ุญูู ุฅุถุงูู
    answers = models.JSONField("ูู ุงูุฅุฌุงุจุงุช", blank=True, null=True)
    form_date = models.DateTimeField(null=True, blank=True)
    submitted_at = models.DateTimeField("ุชุงุฑูุฎ ุงูุญูุธ", auto_now_add=True)

    def calculate_percentage(self):
        """ุชุญููู ุงููุต (ูุซูุงู 4/5) ุฅูู ูุณุจุฉ ูุฆููุฉ"""
        try:
            num, den = map(int, self.score.split("/"))
            return (num / den) * 100
        except Exception:
            return None

    def save(self, *args, **kwargs):
        # ูุจู ุงูุญูุธ ุงุญุณุจ ุงููุณุจุฉ
        self.percentage = self.calculate_percentage()
        super().save(*args, **kwargs)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["exam", "email", "form_date", "score"], name="unique_exam_result"
            )
        ]

    def __str__(self):
        return f"{self.exam.title if self.exam else 'No Exam'} - {self.email} - {self.score} ({self.percentage}%)"
    class Meta:
        verbose_name = _("ูุชุงุฆุฌ ุงูุงูุชุญุงู ")
        verbose_name_plural = _("ูุชุงุฆุฌ ุงูุงูุชุญุงูุงุช ")

class Exam(models.Model):
    STAGES = (
        (1, "ูุจุชุฏุฆ"),
        (2, "ูุชูุณุท"),
        (3, "ูุชูุฏู"),
        (4, "ูุชุฎุตุต"),
        (7, "ุงูููุฑุฃุฉ ุงูุนุงูุฉ"),
    )

    title = models.CharField(max_length=200, verbose_name="ุนููุงู ุงูุงูุชุญุงู", null=True, blank=True)
    stage = models.PositiveSmallIntegerField(choices=STAGES, verbose_name="ุงููุฑุญูุฉ", null=True, blank=True)
    google_form_link = models.URLField(verbose_name="ุฑุงุจุท Google Form", null=True, blank=True)
    google_sheet_url = models.URLField(verbose_name="ุฑุงุจุท Google Sheet", null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    @property
    def sheet_id(self):
        try:
            return self.google_sheet_url.split("/d/")[1].split("/")[0]
        except:
            return None

    @property
    def form_id(self):
        try:
            return self.google_form_link.split("/d/")[1].split("/")[0]
        except:
            return None

    @property
    def form_url(self):
        if self.form_id:
            return f"https://docs.google.com/forms/d/{self.form_id}/viewform"
        return self.google_form_link

    def __str__(self):
        return f"{self.title} ({self.get_stage_display()})"
    class Meta:
        verbose_name = _("ุงูุงูุชุญุงูุงุช ")
        verbose_name_plural = _("ุงูุงูุชุญุงูุงุช ")
class ContactMessage(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name="contact_messages"
    )
    name = models.CharField(max_length=255)
    email = models.EmailField()
    message = models.TextField()
    status = models.CharField(max_length=50, default="unread")
    created_at = models.DateTimeField(auto_now_add=True)
    admin_notes = models.TextField(blank=True, null=True)

    parent = models.ForeignKey(
        "self",
        null=True,
        blank=True,
        on_delete=models.CASCADE,
        related_name="replies"
    )

    is_read = models.BooleanField(default=False)  # <--- ุฃุถู ุฏู

    def __str__(self):
        return f"{self.name} - {self.status}"
    class Meta:
        verbose_name = _("ุงูุฑุณุงุฆู ุงููุงุฑุฏู ")
        verbose_name_plural = _("ุงูุฑุณุงุฆู ุงููุงุฑุฏู ")
